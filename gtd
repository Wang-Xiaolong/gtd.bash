#!/usr/bin/env bash
# env here is to use the 1st bash in $PATH -- it's a BKM

usage() {  #heredoc
	cat<<-EOF
gtd = Getting Things Done
Collect and manage your ideas, todos, logs and files.
Usage:
  . ${BASH_SOURCE[0]} init
  gtd [-h|--help|-?]
  gtd <command> [<args>]

The most commonly used gtd commands are:
  init		Make the gtd command available.
  cd|chdir	Change the working directory.
  add		Add a new file to the library.
  md|mkdir	Add a new directory to the library.
  rm|remove	Remove files from the library.
  ls|list	List files in the library.
  view		View a file in the library.
  edit		Edit a file in the library.
  set		Set the attributes of a file in the library.
	EOF
}

#=== PUBLIC FUNCTIONS ==========================================================
debug() { [ $debug == true ] && >&2 echo "$@"; }
vecho() { [ $verbose == true ] && echo "$@"; }
# only "$@" can trans args properly, $@/$*/"$*" can't.
str_trim() { echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'; }

#=== FILE ======================================================================
# fn: file name
# fx: file attributs
#   ftime
#   fid
#   falias
#   fparent
#   fdep
#   fname
#   ftype
#   fattr[]
fn2fx() { # $1=fn; output: ftime, fid, ftype, fattr[]
	debug "fn2fx($1)"
	local PARTS, part
	IFS='.' read -ra PARTS <<< "$1"
	ftime=${PARTS[0]}; debug "ftime=$ftime"
	fid=${PARTS[1]:3}; debug "fid=$fid" # :3 to bypass id=
	ftype=${PARTS[-1]}; debug "ftype=$ftype"
	local attr_cnt=${#PARTS[@]}
	if [ $attr_cnt -le 3 ]; then
		debug "attr_cnt=$attr_cnt, no additional attributes."
		return
	fi
	attr_cnt=$attr_cnt-3
	for part in "${PARTS[@]:2:$attr_cnt}"; do # get all other fields
		fattr+=("$part")
	done
	debug "fattr: ${fattr[@]}"
}

fx2fn() { # input: ftime, fid, ftype, fattr[]; output: echo fn
	local fn="$ftime.id=$fid"
	for attr in "${fattr[@]}"; do
		fn="$fn.$attr"
	done
	fn="$fn.$ftype"
	echo "$fn"
}

#debug=true
#ftime=fid=ftype=""
#fattr=()
#fn2fx "11.id=12.pr=13.dep=14.name=hello.marktree"
#fx2fn
#exit

fx2fx() { # $1="set string"
	return
}

#=== THE FILE SYSTEM ===========================================================
# The name of a file contains its attributes, e.g.
#   20170829103244.id=1001.alias=coding_style.tag=script,todo,closed.txt
# Attributes are separated by dots '.',
# The first attribute is the create time, in the format of yyyymmddHHMMSS, e.g.
#   20170829103244
# The last attribute is the type or ext of the file, could be anything, e.g.
#   txt, log, doc, ppt, jpg ... the default created type is mt, the marktree.
# The attributes in the middle need to be formatted as
#   attribute=value or attribute=value1,value2,... e.g.
#   id=1001 or category=home,office,car

fs_print_fi() { # fi: file info; $1=fn $2=format=0|1|2|...|v
  # 0 -- file info only, 1 line
  # 1 -- file info and 1 content line, 1 or 2 lines
  # 2+ -- file info and 2+ content line
  # v -- file info and view all content
	IFS='.' read -ra PARTS <<< "$1"
	local ct="${PARTS[0]}" # create time
	local cts="${ct:0:4}-${ct:4:2}-${ct:6:2} ${ct:8:2}:${ct:10:2}" # ct str
	local id=`echo "${PARTS[1]}" | cut -d "=" -f 2`
	local ext="${PARTS[-1]}"
	local fp=`fs_fn2fp $1` # file path
	if [ "$2" == "1n" ]; then # put 1n here is improve 1n perf
		[ "$ext" == "mt" ] && \
		  n1=`head -n1 "$fp" | sed 's/<mt.*>//g'` \
		  || n1="[$ext]"
		echo "[$cts] $id: $n1"
		return
	fi

	case "$2" in
	2n) echo ;;
	8n) echo ;;
	full) echo ;;
	*) echo "Wrong fs_print_fi arg2: $2"; exit 1;;
	esac
}
#==- CONFIG: .gtdrc ============================================================
usage_config() {
	cat<<-EOF
You can write a .gtdrc config file in the directory of this script to store
you configurations.
The format is like a ini file:
# comment1
key1 = value1
[section]
  key2 = value2

== Command Alias Configuration ==
"gtd" is not quite smooth when typing on keyboard, maybe "gge" is faster.
You can write the command alias in .gtdrc, [alias] section.
And the command alias will be set after you initialized gtd using init command.
Here is an example:
[alias]
  gga = gtd add
  ggl = gtd list
  gge = gtd edit
	EOF
}

get_config_section() { # $1=section, if no, get global lines
	debug "get_config_section($1)"
	[ ! -f "$GTD_ROOT/.gtdrc" ] && debug "no .gtdrc" && return
	local section=""
	while read -r line || [[ -n "$line" ]]; do
		if [[ "$line" == \#* ]]; then # comment
			debug "comment line: $line"
			continue
		elif [[ -z "${line// }" ]]; then # empty
			debug "empty line: $line"
			continue
		elif [[ "$line" == \[*\] ]]; then # section
			debug "section line: $line"
			section=`echo $line | tr -d []`
		else
			debug "ordinary line: $line"
			if [[ $# -eq 0 ]]; then # no section specified
				[ -z "$section" ] && echo "$line"
			elif [ "$section" == "$1" ]; then
				echo "$line"
			fi
		fi
	done < "$GTD_ROOT/.gtdrc"
}

print_config_line() { # $1=line, $2=format, %k=key, %v=value
	debug "print_config_line($1, $2)"
	IFS='=' read key value <<< "$1" # split line to key & value by =
	key=`str_trim "$key"` # trim white spaces
	value=`str_trim "$value"`
	debug "key: $key, value: $value"
	key_replaced=${2//%k/$key} # %k->key
	value_replaced=${key_replaced//%v/$value} # %v->value
	debug "print_config_line() return: $value_replaced"
	echo "$value_replaced"
}

get_config() { # $1=key, $2=section, optional
	debug "get_config($@)"
	[ ! -f "$GTD_ROOT/.gtdrc" ] && debug "no .gtdrc" && return
	local line=`get_config_section $2 \
	  | grep -e "^[[:space:]]*$1[[:space:]]*="`
	[ -z "$line" ] && return
	print_config_line "$line" "%v"
}
#=== INIT ======================================================================
usage_init() {
	cat<<-EOF
Usage: . ${BASH_SOURCE[0]} init
This command should be run in source mode before any other gtd command.
It will make gtd a command by adding the path of the directory containing
  this script to system PATH.
The directory will also be used as the working directory of the gtd commands,
  all files will be stored here.
Command alias will also be registerred if they are written in the .gtdrc
  config file in the same directory. 'gtd config -h' to get the detail.
	EOF
}

gtd_ps1() {
	local find_res=`find "$GTD_ROOT" -type d -wholename "$PWD"`
	if [ -n $find_res ]; then # PWD is within GTD_ROOT
		if [ "$GTD_ROOT" == "$PWD" ]; then
			echo "GTD"
		else	
			echo "GTD:${PWD#$GTD_ROOT/}" # relative path
		fi
	else # PWD is outside GTD_ROOT
		echo "$PWD"
	fi
}

gtd_init() {
	if [[ "$0" != *"bash" ]]; then # $0 is path of bash indicate
	  # it runs in current shell (or source mode, ". gtd"),
	  # init should run in current shell to keep the vars.
		echo "init should be run in source mode: '. $0 init'"
		usage_init
		return
	fi
	# bkm to get the dir path of the script file
	local code_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	echo "GTD working directory: $code_dir"
	export GTD_ROOT="$code_dir" # files are with the script

	# +PATH to make gtd a command, no need for the 2nd init
	[[ ! "$PATH" =~ "$code_dir" ]] && export PATH="$PATH:$code_dir"

	# alias command from .gtdrc [alias] alias=cmd
	# alias -p to check the result
	local alias_lines=`get_config_section alias`
	debug "alias_lines: $alias_lines"
	while read -r line; do
		local cmd=`print_config_line "$line" "alias %k='%v'"`
		echo "$cmd" && eval $cmd # eval, bkm to exe a string
	done <<< "$alias_lines"

	PS1="\e[0;32m\$(gtd ps1)\e[m \$ " # Green prompt

	local short_gtd_root=`get_config short_gtd_root`
	if [ -n "$short_gtd_root" ]; then
		export $short_gtd_root="$GTD_ROOT"
		echo "You can use \$$short_gtd_root"\
		  "to refer GTD working directory."
	fi
}
#=== Mkdir =====================================================================
usage_mkdir() {
	cat<<-EOF
Usage: gtd mkdir [OPTION]... DIRECTORY...
Create the DIRECTORY(ies), if they do not already exist.

Options:
  -a, --alias=ALIAS     create with alias as ALIAS,
                        used when creating only 1 directory.
  -t, --type=TYPE       create with type as TYPE
  -n, --name=NAME       create with long name as NAME
  -s, --set=SETTING     create with special SETTING.
  -e, --editor=EDITOR   open with EDITOR to modify long name and detail.
  -v, --verbose         open with EDITOR or system editor
                        to modify long name and detail.
	EOF
}

max_dir_id() {
	find "$GTD_ROOT" -type f -name ".id=*" -printf "%f\n" \
	  | grep -o ".id=[0-9]*" | sed -e "s/.id=//" | sort -n | tail -1
}

gen_new_dir_fn() {
	local max_id=$(max_dir_id); local id
	[ -z "$max_id" ] && id=1 || id=$(( $max_id + 1 ))
	debug "gen_new_dir_fn(a=$alias, t=$type, n=$name, s=${setting[@]})=>$id"
	echo ".id=$id.marktree"
}

gtd_mkdir() {
	PARAMS="$(getopt -o a:t:n:s:e: --long alias:type:name:set:editor: \
	  -n 'gtd.mkdir' -- "$@")"
	[ $? -ne 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_mkdir($@)"
	local alias=""; local type=""; local name=""; local setting=()
	local editor=""
	while : ; do
		case "$1" in
		-a|--alias) alias="$2"; shift 2;;
		-t|--type) type="$2"; shift 2;;
		-n|--name) name="$2"; shift 2;;
		-s|--set) setting+=("$2"); shift 2;;
		-e|--editor) editor="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done

	if [ $# -gt 1 ]; then
		[ -n "$alias" ] && \
		echo "Can't create multiple directories with the same alias." \
		&& return

		[[ -n "$editor" || $verbose == true ]] && \
		echo "Can't edit multiple directories at the same time." \
		&& return
	fi

	for dir in "$@"; do
		mkdir $dir
		if [ $? -ne 0 ]; then
			echo "Fail creating $dir."
			continue
		fi
		# dir created
		local abs_path="$(cd $dir && pwd)"
		local find_res=`find "$GTD_ROOT" -type d -wholename "$abs_path"`
		if [ -z "$find_res" ]; then # dir is not within GTD_ROOT
			vecho "$abs_path is not a GTD directory."
			return
		fi
		# dir is a GTD directory, create the info file
		local fn=$(gen_new_dir_fn)
		echo "$name" > "$dir/$fn"

		if [[ -n "$editor" || $verbose == true ]]; then
			select_editor
			[ -z "$editor" ] && \
			  echo "No available editor." && return
			$editor "$dir/$fn"
		fi
	done
}
#=== ADD =======================================================================
usage_add() {
	cat<<-EOF
Usage: gtd add [OPTION]... [MESSAGE]...
Create a file with the content of MESSAGE.
If MESSAGE is not provided, an empty file will be created.

Options:
  -d, --dir=DIR         Create within the DIR directory.
  -e, --editor=EDITOR   Create and edit with EDITOR.
  -v, --verbose         Create and edit with EDITOR or system editor.
  -f, --file=PATH       Import a file into the library.
                        MESSAGE will be ignored when this option used.
  --template=TEMPLATE   Create from the TEMPLATE.
                        MESSAGE will be ignored when this option used.
  -t, --time=TIME       Create with the file time set to TIME.
  -s, --set=SETTING     Create with the SETTINGs.
	EOF
}

max_fid() {
	find "$GTD_ROOT" -type f -name "[!.]*.id=*" -printf "%f\n" \
	  | grep -o ".id=[0-9]*" | sed -e "s/.id=//" | sort -n | tail -1
}

gen_new_fn() {
	local max_fid=$(max_fid); local id=""
	[ -z "$max_fid" ] && id=10000 || id=$(( $max_fid + 1 ))
	if [ -z "$time" ]; then
		time_str=$(date +%Y%m%d%H%M%S)
	else
		time_str=$(date -d "$time" +%Y%m%d%H%M%S)
	fi
	debug "gen_new_fn(a=$alias, t=$time, s=${setting[@]})=>$id"
	echo "$time_str.id=$id.marktree"
}

gtd_add() {
	PARAMS=`getopt -o d:e:f:t:s: \
	  --long dir:,editor:,file:,template:,time:,set: \
	  -n 'gtd.add' -- "$@"`
	[ $? -ne 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_add($@)"
	local dir=""; local editor=""; local file=""; local template=""
	local time=""; local settings=();
	while : ; do
		case "$1" in
		-d|--dir) dir="$2"; shift 2;;
		-e|--editor) editor="$2"; shift 2;;
		-f|--file) file="$2"; shift 2;;
		--template) template="$2"; shift 2;;
		-t|--time) time="$2"; shift 2;;
		-s|--set) settins+="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
	local message="$*"

	if [ -n "$dir" ]; then
		[ ! -d "$dir" ] && echo "Directory $dir not found!" && return
		dir="$(cd "$dir" && pwd)"
	else
		dir="$PWD"
	fi

	local find_res=`find "$GTD_ROOT" -type d -wholename "$dir"`
	if [ -z $find_res ]; then # dir is not in GTD_ROOT
		echo "$dir is not in GTD_ROOT, can't add file."
		return
	fi

	if [[ -z "$message" && $verbose == false && -z "$editor" ]]; then
		echo "Any stuff, please (ctrl-d to end, ctrl-c to cancel):"
		[ $in_shell == true ] && trap "echo; return" INT
		message=`cat` # save keyin until eof
		if [ -z `echo $message | tr -d '[:space:]'` ]; then # empty?
			echo "Nothing!"
			return
		fi
	fi

	local fn=$(gen_new_fn)
	echo "$message" > "$dir/$fn"
	echo "$dir/$fn created."

	if [[ $verbose == true || -n "$editor" ]]; then
		select_editor
		[ -z "$editor" ] && return
		echo "Editing $dir/$fn with $editor ..."
		$editor "$dir/$fn"
	fi
}
#=== MOVE ======================================================================
usage_move() {
	cat<<-EOF
Usage: gtd move [OPTION]... SOURCE... DEST
   or: gtd move -d DEST SOURCE...
Move all files specified by SOURCE under the file of DEST.

Options:
  -d, --dest=DEST  Move all SOURCE files under DEST
	EOF
}

gtd_move_1file() { # $1=src str; input: $dest_dir
	local src_path=`str2path "$1"`
	[ -z "$src_path" ] && echo "No source $src found." && continue
	[[ "$(basename "$src_path")" == .id=* ]] \
	  && src_path="$(dirname "$src_path")"
	echo "mv $src_path $dest_dir"
	mv "$src_path" "$dest_dir"
}

gtd_move() {
	PARAMS=`getopt -o t: --long target: \
	  -n 'gtd.move' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_move($@)"
	local dest=""
	local source=()
	while : ; do
		case "$1" in
		-d|--dest) dest="$2"; shift 2;;
		--) shift; break;; # after -- are non option args
		*) echo "Unknown option: $1"; return;;
		esac
	done
	if [ -z "$dest" ]; then # no -d, source... dest
		if [ $# -lt 2 ]; then
			echo "Source or dest id/alias not specified."
			return
		fi
		dest="${@:${#}}"
		source=( "${@:1:${#}-1}" )
	else # -d option->dest, $@ all source
		if [ $# -eq 0 ]; then
			echo "Source id/alias not specified."
		fi
		source=( "$@" )
	fi
	# TODO: if dest is under source, no move
	# TODO: if dest==source, no move
	# TODO: if already in, no move
	local dest_dir=`str2path "$dest"`
	[ -z "$dest_dir" ] && echo "No dest $dest found." && return
	[ -f "$dest_dir" ] && dest_dir="$(dirname "$dest_dir")"
	for src in "${source[@]}"; do
		gtd_move_1file "$src"
	done
}
#=== LIST ======================================================================
usage_list() {
	cat<<-EOF
Usage: gtd list [OPTION]... [FILE]...
List info about the FILEs (or directories, current directory by default)

  -o, --option=VALUE  Meaning
	EOF
}

print_dir_info() { # $1=path
	local ifile=$(find $1 -maxdepth 1 -name ".id=*")
	[ -z "$ifile" ] && basename $1 && return
	local ifn="$(basename "$ifile")"
	IFS='.' read -ra PARTS <<< "$ifn"
	local id=`echo "${PARTS[1]}" | sed -e "s/id=//"`
	printf "[%s] %s: " "$id" "$(basename "$1")"
	head -1 "$ifile" | sed -e "s/<mt.*>//"
}

print_file_info() { # $1=path
	local fn="$(basename "$1")"
	[[ "$fn" != *.id=* ]] && echo "$fn" && return
	IFS='.' read -ra PARTS <<< "$fn"
	local ct="${PARTS[0]}" # create time
	local cts="${ct:2:2}${ct:4:2}${ct:6:2} ${ct:8:2}:${ct:10:2}"
	local id=`echo "${PARTS[1]}" | sed -e "s/id=//"`
	printf "%s %s " "$cts" "$id"
	local ext="${PARTS[-1]}"
	if [ $ext == marktree ]; then
		head -1 "$1" | sed -e "s/<mt.*>//"
	else
		printf "[$s]\n" "$ext"
	fi
}

list_dir() { # $1=abs path of dir or ifile
	debug "list_dir($@)"
	local dir=""
	if [ -d "$1" ]; then
		dir="$1"
		echo "-- $1"
	else # ifile
		dir="$(cd $(dirname "$1") && pwd)"
		echo "-- GTD:${dir#$GTD_ROOT}:`print_dir_info "$dir"`"
	fi

	debug "dir=$dir"
	while read fn; do
		[ -d "$dir/$fn" ] && print_dir_info "$dir/$fn" && continue
		print_file_info "$dir/$fn"
	done < <(ls -1 -r $dir)
}

list_file() { # $1=path
	debug "list_file($@)"
}

list_obj() { # $1=str:dir/file/id/alias
	local path="$(str2path "$1")"
	[ -z "$path" ] && echo "$1 not found." && return
	debug "path=$path"
	if [ -d "$path" ]; then # $1 is a common dir or GTD_ROOT
		local abs_path=`cd $path && pwd`
		debug "abs_path=$abs_path"
		list_dir "$abs_path"
		return
	fi
	# path is a file or ifile
	local bn="$(basename $path)"
	debug "bn=$bn"
	[[ "$bn" == .id=* ]] && list_dir "$path" && return
	[[ "$bn" == *.id=* ]] && list_file "$path" && return
	echo "-- $1"
	echo "$bn"
}

gtd_list() {
	PARAMS=`getopt -o ab: --long apple,banana: \
	  -n 'gtd.list' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_list($@)"
	apple=false; banana=""
	while : ; do
		case "$1" in
		-a|--apple) apple=true; shift;;
		-b|--banana) banana="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
	if [ $# -eq 0 ]; then
		list_obj "."
	else
		for file in "$@"; do
			list_obj "$file"
		done
	fi
}
#=== Edit =====================================================================
usage_edit() {
	cat<<-EOF
Usage: gtd edit [OPTION]... <id or alias>
Edit a file with a specified editor.
The file is specified by its id or alias.
The editor can be specified with the following method (sorted by priority):
  1. Use option -e or --editor
  2. Use GTD_EDITOR variable
  3. Use editor variable in the .gtdrc file beside the gtd command script. 
  4. If none of the above provided, use vim or vi if your OS provided them.

Options:
  -e, --editor=EDITOR  Use the specified editor.
	EOF
}

select_editor() { # need $editor in the caller and will manipulate
	if [ -z "$editor" ]; then
		if [ -z "$GTD_EDITOR" ]; then
			editor=`get_config editor`
			[ -n editor ] && \
			  vecho "Editor $editor specified from .gtdrc."
		else
			editor="$GTD_EDITOR"
			vecho "Editor $editor specified from GTD_EDITOR."
		fi
	fi
	if [ -z "$editor" ]; then
		if [ -n `command -v vim` ]; then
			editor=vim
		elif [ -n `command -v vi` ]; then
			editor=vi
		else
			echo "No editor specified, and no vim or vi."
			echo "Please specify an editor that can be used."
			usage_edit
			return
		fi
		echo "No editor specified, using $editor."
	else # editor specified, check it's existence
		if [ -z `command -v $editor` ]; then # not exist
			echo "Editor $editor not exist, please try another."
			return
		fi
	fi
}

str2path() { # $1=str, could be path, id or alias
  # GTD directory -> ifile path
  # non-GTD directory -> directory path
  # Any file -> file path
	if [ -e "$1" ]; then # $1 is a real path
		if [ -d "$1" ]; then # $1 is a dir
			local ifile="$(find "$1" -maxdepth 1 \
			  -type f -name ".id=*")"
			[ -n "$ifile" ] && echo "$ifile" && return
		fi
		echo "$1"
	elif [ "$1" == 0 ]; then
		echo "$GTD_ROOT"
	elif [[ $1 =~ ^[0-9]+$ ]]; then # $1=id
		find "$GTD_ROOT" -type f -name "*.id=$1.*"
	else # $1=alias
		find "$GTD_ROOT" -type f -name "*.alias=$1.*"
	fi
}

gtd_edit() {
	PARAMS=`getopt -o e: --long editor: \
	  -n 'gtd.edit' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_edit($@)"
	local editor=""
	while : ; do
		case "$1" in
		-e|--editor) editor="$2"
			vecho "Editor $editor specified from command line."
			shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done

	[ $# -eq 0 ] && usage_edit && return
	fn=`str2path $1`
	[ -z "$fn" ] && echo "$1 not found." && return
	echo "Edit $fn ..."
	select_editor
	[ -z "$editor" ] && return
	$editor "$fn"
}
#=== TEST functions in place ===================================================
usage_test() {
	cat<<-EOF
Usage: gtd test [OPTION]...
Internal test of gtd functions.

Options:
  -o, --option=VALUE  Meaning
	EOF
}

gtd_test() {
	PARAMS=`getopt -o t: --long task: -n 'gtd.test' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_test($@)"
	local task=""
	while : ; do
		case "$1" in
		-t|--task) task="$2" shift 2;; #TODO:support multi task
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
}
#=== SHELL =====================================================================
usage_shell() {  #heredoc
	cat<<-EOF
Shell-like environment, where you can run gtd commands without typing 'gtd'.
	EOF
}

in_shell=false
process_command() {
	[ $# -eq 0 ] && usage && return 0  #No arg, show usage

	case "$1" in  #$1 is command
	init) [ $help_me == true ] && usage_init || gtd_init;;
	ps1) gtd_ps1;;
	config) [ $help_me == true ] && usage_config || vim "$GTD_ROOT/.gtdrc";;
	md|mkdir) shift; [ $help_me == true ] && usage_mkdir || gtd_mkdir "$@";;
	a|add) shift; [ $help_me == true ] && usage_add || gtd_add "$@";;
	m|mv|move) shift; [ $help_me == true ] && usage_move || gtd_move "$@";;
	l|ls|list) shift; [ $help_me == true ] && usage_list || gtd_list "$@";;
	e|ed|edit) shift; [ $help_me == true ] && usage_edit || gtd_edit "$@";;
	shell) [ $in_shell == false ] && gtd_shell "$@"\
	  || echo "We are already in gtd shell.";;
  	exit) [ $in_shell == true ] && in_shell=false \
	  || echo "exit is a gtd shell command.";;
  	help) usage;;
	version) echo "0.02 2017-08-24 paulo.dx@gmail.com";;
	test) shift; [ $help_me == true ] && usage_test || gtd_test "$@";;
	*) echo "Incorrect command: $1"; usage;;
	esac
	return 0
}

gtd_shell() {
	[ $help_me == true ] && usage_shell && return

	in_shell=true
	while : ; do # infinite loop
		printf "gtd~ "
		read args
		eval set -- "$args"
		process_command "$@"
		[ $in_shell == false ] && break
	done
}
#=== MAIN ======================================================================
[ $# -eq 0 ] && usage && exit # bkm for no arg check

# process help & verbose & debug in 1 place
args=() # empty array
help_me=false; verbose=false; debug=false
for arg in "$@"; do
	case "$arg" in
	'-?'|-h|--help) help_me=true;; # ? is a wildcard if not br by ''
	-v|--verbose) verbose=true;;
	--debug) debug=true;;
	*) args+=("$arg");; # collect args other than help/verbose/debug
	esac
done

if [[ $help_me == false && "$1" != init ]]; then
  # help_me will always be processed (because showing help need nearly nothing)
  # init will always be processed
  # other commands need at least a working dir, and should run in child shell
	if [[ "$0" == *"bash" ]]; then # source mode: `. gtd` or `source gtd`
		echo "gtd command should not run in source mode."
		return # exit in source mode will exit the shell
	fi # common (non-source) mode below
	if [ -z "$GTD_ROOT" ]; then
		echo "No working directory specified."
		echo "Please run '. $0 init' first."
		usage_init
		exit 0
	fi
fi

[ -z $(command -v getopt) ] && echo "No getopt command." && exit 1
#TODO: give the user some hint to find the package containing the getopt cmd
process_command "${args[@]}"
#=== Template ==================================================================
usage_template() {
	cat<<-EOF
Usage: gtd template [OPTION]...
   or: gtd template [OPTION]...
Description

Options:
  -o, --option=VALUE  Meaning
	EOF
}

gtd_template() {
	PARAMS=`getopt -o ab: --long apple,banana: \
	  -n 'gtd.template' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_template($@)"
	local apple=false; local banana=""
	while : ; do
		case "$1" in
		-a|--apple) apple=true; shift;;
		-b|--banana) banana="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
}
