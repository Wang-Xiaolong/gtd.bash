#!/usr/bin/env bash
# env here is to use the 1st bash in $PATH -- it's a BKM

usage() {  #heredoc
	cat<<-EOF
gtd = Getting Things Done
Collect and manage your ideas, todos, logs and files.
Usage:
  . ${BASH_SOURCE[0]#$PWD/} init
  gtd [-h|--help|-?]
  gtd <command> [<args>]
  . gtd cd DIR

The commands are:
  help          Show this document.
  init          Make the gtd command available.
  cd            Change the working directory.
  add           Add a new file to the library.
  md|mkdir      Add new directories to the library.
  rm|remove     Remove files or directories from the library.
  ls|list       List files in the library.
  edit          Edit a file or a directory in the library.

You can run 'gtd <command> <-h|--help|-?>' to get the document of each command.
	EOF
}

#=== PUBLIC FUNCTIONS ==========================================================
debug() { [ $debug == true ] && >&2 echo "$@"; }
vecho() { [ $verbose == true ] && echo "$@"; }
# only "$@" can trans args properly, $@/$*/"$*" can't.
str_trim() { echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'; }

#=== CONFIG: .gtdrc ============================================================
usage_config() {
	cat<<-EOF
You can write a .gtdrc config file in the directory of this script to store
you configurations.
The format is like a ini file:
# comment1
key1 = value1
[section]
  key2 = value2

== Command Alias Configuration ==
"gtd" is not quite smooth when typing on keyboard, maybe "gge" is faster.
You can write the command alias in .gtdrc, [alias] section.
And the command alias will be set after you initialized gtd using init command.
Here is an example:
[alias]
  gga = gtd add
  ggl = gtd list
  gge = gtd edit
	EOF
}

get_config_section() { # $1=section, if no, get global lines
	debug "get_config_section($1)"
	[ ! -f "$GTD_ROOT/.gtdrc" ] && debug "no .gtdrc" && return
	local section=""
	while read -r line || [[ -n "$line" ]]; do
		if [[ "$line" == \#* ]]; then # comment
			debug "comment line: $line"
			continue
		elif [[ -z "${line// }" ]]; then # empty
			debug "empty line: $line"
			continue
		elif [[ "$line" == \[*\] ]]; then # section
			debug "section line: $line"
			section=`echo $line | tr -d []`
		else
			debug "ordinary line: $line"
			if [[ $# -eq 0 ]]; then # no section specified
				[ -z "$section" ] && echo "$line"
			elif [ "$section" == "$1" ]; then
				echo "$line"
			fi
		fi
	done < "$GTD_ROOT/.gtdrc"
}

print_config_line() { # $1=line, $2=format, %k=key, %v=value
	debug "print_config_line($1, $2)"
	IFS='=' read key value <<< "$1" # split line to key & value by =
	key=`str_trim "$key"` # trim white spaces
	value=`str_trim "$value"`
	debug "key: $key, value: $value"
	key_replaced=${2//%k/$key} # %k->key
	value_replaced=${key_replaced//%v/$value} # %v->value
	debug "print_config_line() return: $value_replaced"
	echo "$value_replaced"
}

get_config() { # $1=key, $2=section, optional
	debug "get_config($@)"
	[ ! -f "$GTD_ROOT/.gtdrc" ] && debug "no .gtdrc" && return
	local line=`get_config_section $2 \
	  | grep -e "^[[:space:]]*$1[[:space:]]*="`
	[ -z "$line" ] && return
	print_config_line "$line" "%v"
}
#=== INIT ======================================================================
usage_init() {
	cat<<-EOF
Usage: . ${BASH_SOURCE[0]#$PWD/} init
This command should be run in source mode before any other gtd command.
It will make gtd a command by adding the path of the directory containing
  this script to system PATH.
The directory will also be used as the working directory of the gtd commands,
  all files will be stored here.
Command alias will also be registerred if they are written in the .gtdrc
  config file in the same directory. 'gtd config -h' to get the detail.
	EOF
}

gtd_ps1() {
	local find_res=`find "$GTD_ROOT" -type d -wholename "$PWD"`
	if [ -n $find_res ]; then # PWD is within GTD_ROOT
		if [ "$GTD_ROOT" == "$PWD" ]; then
			echo "GTD"
		else	
			echo "GTD:${PWD#$GTD_ROOT/}" # relative path
		fi
	else # PWD is outside GTD_ROOT
		echo "$PWD"
	fi
}

gtd_init() {
	if [[ "$0" != *"bash" ]]; then # $0 is path of bash indicate
	  # it runs in current shell (or source mode, ". gtd"),
	  # init should run in current shell to keep the vars.
		echo "init should be run in source mode: '. $0 init'"
		usage_init
		return
	fi
	# bkm to get the dir path of the script file
	local code_dir="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	echo "GTD working directory: $code_dir"
	export GTD_ROOT="$code_dir" # files are with the script

	# +PATH to make gtd a command, no need for the 2nd init
	[[ ! "$PATH" =~ "$code_dir" ]] && export PATH="$PATH:$code_dir"

	# alias command from .gtdrc [alias] alias=cmd
	# alias -p to check the result
	local alias_lines=`get_config_section alias`
	debug "alias_lines: $alias_lines"
	while read -r line; do
		local cmd=`print_config_line "$line" "alias %k='%v'"`
		echo "$cmd" && eval $cmd # eval, bkm to exe a string
	done <<< "$alias_lines"

	PS1="\e[0;32m\$(gtd ps1)\e[m \$ " # Green prompt

	local short_gtd_root=`get_config short_gtd_root`
	if [ -n "$short_gtd_root" ]; then
		export $short_gtd_root="$GTD_ROOT"
		echo "You can use \$$short_gtd_root"\
		  "to refer GTD working directory."
	fi
}
#=== THE FILE SYSTEM ===========================================================
# The GTD file system is located at $GTD_ROOT, with directories and files.
# A directory could be ordinary or a GTD one.
# A GTD directory has an 'ifile' under it, with the name:
# .id=<id>[.alias=<alias>][.<attribute>=<value>][...].marktree
# So a GTD directory could be located by id or alias.
# A file could be ordinary or a GTD one.
# A GTD file has special file name:
# 20170829103244.id=<id>[.alias=<alias>][.<attribute>=<value>][...].marktree
# here '20170829103244' is the 'time' property of the file.
# So a GTD file could also be located by id or alias.

str2path() { # $1=str, could be path, id or alias
  # GTD directory -> ifile path
  # non-GTD directory -> directory path
  # Any file -> file path
	if [ -e "$1" ]; then # $1 is a real path
		if [ -d "$1" ]; then # $1 is a dir
			local ifile="$(find "$1" -maxdepth 1 \
			  -type f -name ".id=*")"
			[ -n "$ifile" ] && echo "$ifile" && return
		fi
		echo "$1" # common file (could be GTD or not) or dir
	elif [ "$1" == 0 ]; then
		echo "$GTD_ROOT"
	elif [[ $1 =~ ^[0-9]+$ ]]; then # $1=id
		find "$GTD_ROOT" -type f -name "*.id=$1.*"
	else # $1=alias
		find "$GTD_ROOT" -type f -name "*.alias=$1.*"
	fi
}

print_obj_info() { # $1=path or gtd file or ifile;
  # $2=format string, %i=id %a=attr %r=rpath %h=head %t=time
	local bn=$(basename "$1")
	local apath="$(cd $(dirname "$1") && pwd)"
	local rpath="${apath#$GTD_ROOT}"
	IFS='.' read -ra PARTS <<< "$bn"
	local ct="${PARTS[0]}" # create time
	local cts="${ct:0:4}-${ct:4:2}-${ct:6:2} ${ct:8:2}:${ct:10:2}" # ct str
	local id=`echo "${PARTS[1]}" | cut -d "=" -f 2`
	local ext="${PARTS[-1]}"
	local fp=`fs_fn2fp $1` # file path
	if [ "$2" == "1n" ]; then # put 1n here is improve 1n perf
		[ "$ext" == "mt" ] && \
		  n1=`head -n1 "$fp" | sed 's/<mt.*>//g'` \
		  || n1="[$ext]"
		echo "[$cts] $id: $n1"
		return
	fi

	case "$2" in
	2n) echo ;;
	8n) echo ;;
	full) echo ;;
	*) echo "Wrong fs_print_fi arg2: $2"; exit 1;;
	esac
}
#=== MD/MKDIR ==================================================================
usage_mkdir() {
	cat<<-EOF
Usage: gtd mkdir [OPTION]... DIRECTORY...
Create the DIRECTORY(ies), if they do not already exist.

Options:
  -a, --alias=ALIAS     create with alias as ALIAS,
                        used when creating only 1 directory.
  -e, --editor=EDITOR   open with EDITOR to modify long name and detail.
  -v, --verbose         open with EDITOR or system editor
                        to modify long name and detail.
	EOF
}

max_dir_id() {
	find "$GTD_ROOT" -type f -name ".id=*" -printf "%f\n" \
	  | grep -o "\.id=[0-9]*" | sed -e "s/\.id=//" | sort -n | tail -1
}

gen_new_dir_fn() {
	local max_id=$(max_dir_id); local id
	[ -z "$max_id" ] && id=1 || id=$(( $max_id + 1 ))
	debug "gen_new_dir_fn(a=$alias, t=$type, n=$name, s=${setting[@]})=>$id"
	echo ".id=$id.marktree"
}

gtd_mkdir() {
	PARAMS="$(getopt -o a:e: --long alias:editor: \
	  -n 'gtd.mkdir' -- "$@")"
	[ $? -ne 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_mkdir($@)"
	local alias=""; local editor=""
	while : ; do
		case "$1" in
		-a|--alias) alias="$2"; shift 2;;
		-e|--editor) editor="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done

	if [ $# -gt 1 ]; then
		[ -n "$alias" ] && \
		echo "Can't create multiple directories with the same alias." \
		&& return

		[[ -n "$editor" || $verbose == true ]] && \
		echo "Can't edit multiple directories at the same time." \
		&& return
	fi

	for dir in "$@"; do
		mkdir $dir
		if [ $? -ne 0 ]; then
			echo "Fail creating $dir."
			continue
		fi
		# dir created
		local abs_path="$(cd $dir && pwd)"
		local find_res=`find "$GTD_ROOT" -type d -wholename "$abs_path"`
		if [ -z "$find_res" ]; then # dir is not within GTD_ROOT
			vecho "$abs_path is not a GTD directory."
			return
		fi
		# dir is a GTD directory, create the info file
		local fn=$(gen_new_dir_fn)
		echo "$name" > "$dir/$fn"

		if [[ -n "$editor" || $verbose == true ]]; then
			select_editor
			[ -z "$editor" ] && \
			  echo "No available editor." && return
			$editor "$dir/$fn"
		fi
	done
}
#=== CD/CHDIR ==================================================================
usage_cd() {
	cat<<-EOF
Usage: . gtd cd DIR
Change the working directory to DIR. Should be run in source mode.
	EOF
}

gtd_cd() {
	[ -z "$GTD_ROOT" ] && echo "GTD not init." && return
	if [[ "$0" != *"bash" ]]; then # $0 is path of bash indicate
	  # it runs in current shell (or source mode, ". gtd"),
	  # cd should run in current shell to keep the PWD.
		echo "cd should be run in source mode: '. $0 init'"
		usage_cd
		return
	fi
	[ $# -eq 0 ] && return
	local dir="$(str2path "$1")"
	[ -z "$dir" ] && echo "Directory $1 not found." && return
	[ -f "$dir" ] && cd "$(dirname "$dir")" && return
	cd "$dir"
}
#=== ADD =======================================================================
usage_add() {
	cat<<-EOF
Usage: gtd add [OPTION]... [MESSAGE]...
Create a file with the content of MESSAGE.
If MESSAGE is not provided, an empty file will be created.

Options:
  -d, --dir=DIR         Create within the DIR directory.
  -e, --editor=EDITOR   Create and edit with EDITOR.
  -v, --verbose         Create and edit with EDITOR or system editor.
  -f, --file=PATH       Import a file into the library.
                        MESSAGE will be ignored when this option used.
  --template=TEMPLATE   Create from the TEMPLATE.
                        MESSAGE will be ignored when this option used.
  -t, --time=TIME       Create with the file time set to TIME.
  -s, --set=SETTING     Create with the SETTINGs.
	EOF
}

max_fid() {
	find "$GTD_ROOT" -type f -name "[!.]*.id=*" -printf "%f\n" \
	  | grep -o "\.id=[0-9]*" | sed -e "s/\.id=//" | sort -n | tail -1
}

gen_new_fn() {
	local max_fid=$(max_fid); local id=""
	[ -z "$max_fid" ] && id=10000 || id=$(( $max_fid + 1 ))
	if [ -z "$time" ]; then
		time_str=$(date +%Y%m%d%H%M%S)
	else
		time_str=$(date -d "$time" +%Y%m%d%H%M%S)
	fi
	debug "gen_new_fn(a=$alias, t=$time, s=${setting[@]})=>$id"
	echo "$time_str.id=$id.marktree"
}

gtd_add() {
	PARAMS=`getopt -o d:e:f:t:s: \
	  --long dir:,editor:,file:,template:,time:,set: \
	  -n 'gtd.add' -- "$@"`
	[ $? -ne 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_add($@)"
	local dir=""; local editor=""; local file=""; local template=""
	local time=""; local settings=();
	while : ; do
		case "$1" in
		-d|--dir) dir="$2"; shift 2;;
		-e|--editor) editor="$2"; shift 2;;
		-f|--file) file="$2"; shift 2;;
		--template) template="$2"; shift 2;;
		-t|--time) time="$2"; shift 2;;
		-s|--set) settins+="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
	local message="$*"

	if [ -n "$dir" ]; then
		dir_path="$(str2path $dir)"
		[ -z "$dir_path" ] && echo "No directory $dir found." && return
		[ -f "$dir_path" ] && dir="$(dirname "$dir_path")" \
		  || dir="$dir_path"
	else
		dir="$PWD"
	fi

	local find_res=`find "$GTD_ROOT" -type d -wholename "$dir"`
	if [ -z $find_res ]; then # dir is not in GTD_ROOT
		echo "$dir is not in GTD_ROOT, can't add file."
		return
	fi

	if [[ -z "$message" && $verbose == false && -z "$editor" ]]; then
		echo "Any stuff, please (ctrl-d to end, ctrl-c to cancel):"
		[ $in_shell == true ] && trap "echo; return" INT
		message=`cat` # save keyin until eof
		if [ -z `echo $message | tr -d '[:space:]'` ]; then # empty?
			echo "Nothing!"
			return
		fi
	fi

	local fn=$(gen_new_fn)
	echo "$message" > "$dir/$fn"
	echo "$dir/$fn created."

	if [[ $verbose == true || -n "$editor" ]]; then
		select_editor
		[ -z "$editor" ] && return
		echo "Editing $dir/$fn with $editor ..."
		$editor "$dir/$fn"
	fi
}
#=== MOVE ======================================================================
usage_move() {
	cat<<-EOF
Usage: gtd move [OPTION]... SOURCE... DEST
   or: gtd move -d DEST SOURCE...
Move all files specified by SOURCE under the file of DEST.

Options:
  -d, --dest=DEST  Move all SOURCE files under DEST
	EOF
}

gtd_move_1file() { # $1=src str; input: $dest_dir
	local src_path=`str2path "$1"`
	[ -z "$src_path" ] && echo "No source $src found." && continue
	[[ "$(basename "$src_path")" == .id=* ]] \
	  && src_path="$(dirname "$src_path")"
	echo "mv $src_path $dest_dir"
	mv "$src_path" "$dest_dir"
}

gtd_move() {
	PARAMS=`getopt -o t: --long target: \
	  -n 'gtd.move' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_move($@)"
	local dest=""
	local source=()
	while : ; do
		case "$1" in
		-d|--dest) dest="$2"; shift 2;;
		--) shift; break;; # after -- are non option args
		*) echo "Unknown option: $1"; return;;
		esac
	done
	if [ -z "$dest" ]; then # no -d, source... dest
		if [ $# -lt 2 ]; then
			echo "Source or dest id/alias not specified."
			return
		fi
		dest="${@:${#}}"
		source=( "${@:1:${#}-1}" )
	else # -d option->dest, $@ all source
		if [ $# -eq 0 ]; then
			echo "Source id/alias not specified."
		fi
		source=( "$@" )
	fi

	local dest_dir=`str2path "$dest"`
	[ -z "$dest_dir" ] && echo "No dest $dest found." && return
	[ -f "$dest_dir" ] && dest_dir="$(dirname "$dest_dir")"
	for src in "${source[@]}"; do
		gtd_move_1file "$src"
	done
}
#=== LIST ======================================================================
usage_list() {
	cat<<-EOF
Usage: gtd list [OPTION]... [FILE]...
List info about the FILEs (or directories, current directory by default)

  -o, --option=VALUE  Meaning
	EOF
}

print_dir_info() { # $1=path
	local ifile=$(find $1 -maxdepth 1 -name ".id=*")
	[ -z "$ifile" ] && basename $1 && return
	local ifn="$(basename "$ifile")"
	IFS='.' read -ra PARTS <<< "$ifn"
	local id=`echo "${PARTS[1]}" | sed -e "s/id=//"`
	printf "[%s] %s: " "$id" "$(basename "$1")"
	head -1 "$ifile" | sed -e "s/<mt.*>//"
}

print_file_info() { # $1=path
	local fn="$(basename "$1")"
	[[ "$fn" != *.id=* ]] && echo "$fn" && return
	IFS='.' read -ra PARTS <<< "$fn"
	local ct="${PARTS[0]}" # create time
	local cts="${ct:2:2}${ct:4:2}${ct:6:2} ${ct:8:2}:${ct:10:2}"
	local id=`echo "${PARTS[1]}" | sed -e "s/id=//"`
	printf "%s [%s] " "$cts" "$id"
	local ext="${PARTS[-1]}"
	if [ $ext == marktree ]; then
		head -1 "$1" | sed -e "s/<mt.*>//"
	else
		printf "[$s]\n" "$ext"
	fi
}

list_dir() { # $1=abs path of dir or ifile
	debug "list_dir($@)"
	local dir=""
	if [ -d "$1" ]; then
		dir="$1"
	else # ifile
		dir="$(cd $(dirname "$1") && pwd)"
	fi

	debug "dir=$dir"
	while read fn; do
		[ -d "$dir/$fn" ] && print_dir_info "$dir/$fn" && continue
		print_file_info "$dir/$fn"
	done < <(ls -1 -r $dir)
	echo
}

list_obj() { # $1=str:dir/file/id/alias
  # path to non-GTD dir: $1: --then list dir & file
  # path to GTD dir: $1->relative path [id]  --then list dir & file
  # path to non-GTD file: $1
  # path to GTD file: $1->time [id] message
  # id/alias to dir: $1->relative path [id] long name --then list dir & file
  # id/alias to file: $1->relative path time [id] message
	local path="$(str2path "$1")"
	[ -z "$path" ] && echo "$1 not found." && return
	debug "path=$path"
	local bn; local rpath; local h1; local dln; local fln
	if [ -e "$1" ]; then
		if [ -d "$1" ]; then
			if [ -d "$path" ]; then
				echo "$1:"
			else # path is ifile
				bn="$(basename "$path")"
				dln="$(echo $bn | \
				  sed -e "s/\.id=\([0-9]*\).*/[\1]/")"
				h1="$(head -1 "$path")"
				printf "$1->$dln $h1\n"
			fi
			list_dir "$(dirname "$path")"
		else # $1 is file
			bn="$(basename "$1")"
			if [[ "$bn" == *.id=* ]]; then # GTD file
				fln="$(echo $bn | sed -e \
				  "s/\([0-9]*\)\.id=\([0-9]*\)\..*/\1 [\2]/")"
				h1="$(head -1 "$path")"
				printf "$1->$fln $h1\n\n"
			else
				printf "$1\n\n"
			fi
		fi
	else # $1 is id|alias
		rpath="$(cd $(dirname "$path") && pwd)"
		rpath="${rpath#$GTD_ROOT}"
		h1="$(head -1 "$path")"
		printf "$1->#$rpath "
		bn="$(basename "$path")"
		if [[ "$bn" == .id=* ]]; then # ifile
			dln="$(echo $bn | sed -e "s/\.id=\([0-9]*\)\..*/[\1]/")"
			printf "$dln $h1\n"
			list_dir "$(dirname "$path")"
		else # file
			fln="$(echo $bn | \
			  sed -e "s/\([0-9]*\)\.id=\([0-9]*\)\..*/\1 [\2]/")"
			printf "$fln $h1\n\n"
		fi
	fi
}

gtd_list() {
	PARAMS=`getopt -o ab: --long apple,banana: \
	  -n 'gtd.list' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_list($@)"
	apple=false; banana=""
	while : ; do
		case "$1" in
		-a|--apple) apple=true; shift;;
		-b|--banana) banana="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
	if [ $# -eq 0 ]; then
		list_obj "."
	else
		for file in "$@"; do
			list_obj "$file"
		done
	fi
}
#=== Edit =====================================================================
usage_edit() {
	cat<<-EOF
Usage: gtd edit [OPTION]... <id or alias>
Edit a file with a specified editor.
The file is specified by its id or alias.
The editor can be specified with the following method (sorted by priority):
  1. Use option -e or --editor
  2. Use GTD_EDITOR variable
  3. Use editor variable in the .gtdrc file beside the gtd command script. 
  4. If none of the above provided, use vim or vi if your OS provided them.

Options:
  -e, --editor=EDITOR  Use the specified editor.
	EOF
}

select_editor() { # need $editor in the caller and will manipulate
	if [ -z "$editor" ]; then
		if [ -z "$GTD_EDITOR" ]; then
			editor=`get_config editor`
			[ -n editor ] && \
			  vecho "Editor $editor specified from .gtdrc."
		else
			editor="$GTD_EDITOR"
			vecho "Editor $editor specified from GTD_EDITOR."
		fi
	fi
	if [ -z "$editor" ]; then
		if [ -n `command -v vim` ]; then
			editor=vim
		elif [ -n `command -v vi` ]; then
			editor=vi
		else
			echo "No editor specified, and no vim or vi."
			echo "Please specify an editor that can be used."
			usage_edit
			return
		fi
		echo "No editor specified, using $editor."
	else # editor specified, check it's existence
		if [ -z `command -v $editor` ]; then # not exist
			echo "Editor $editor not exist, please try another."
			return
		fi
	fi
}

gtd_edit() {
	PARAMS=`getopt -o e: --long editor: \
	  -n 'gtd.edit' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_edit($@)"
	local editor=""
	while : ; do
		case "$1" in
		-e|--editor) editor="$2"
			vecho "Editor $editor specified from command line."
			shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done

	[ $# -eq 0 ] && usage_edit && return
	fn=`str2path $1`
	[ -z "$fn" ] && echo "$1 not found." && return
	echo "Edit $fn ..."
	select_editor
	[ -z "$editor" ] && return
	$editor "$fn"
}
#=== ALIAS =====================================================================
usage_alias() {
	cat<<-EOF
Usage: gtd alias [ID=[ALIAS]]...
Define, undefine or display file or directory aliases.

Without arguments, print all aliases defined.
Otherwise, the file or directory specified by ID is given an ALIAS.
If ALIAS is empty, the defined alias for ID is removed.
	EOF
}

gtd_alias() {
	if [ $# -eq 0 ]; then # no arg, print aliases
		while read -r file; do
			local str="$(echo "$file" | sed -e \
			  "s/.*\.id=\([0-9]*\)\.alias=\([^.]*\)\..*/\2=\1/")"
			echo "$str $(head -1 "$file")"
		done < <(find "$GTD_ROOT" -name "*\.alias=*")
		return
	fi
	for exp in "$@"; do
		[[ "$exp" != [0-9]*=* ]] && \
		  echo "$exp is not an alias expression." && continue
		IFS='=' read -ra PARTS <<< "$exp"
		local id=${PARTS[0]};
		local ali=${PARTS[1]};
		local old="$(find "$GTD_ROOT" -name "*\.alias=$ali\.*")"
		[ -n "$old" ] && \
		  echo "Alias $ali already used by ${old#$GTD_ROOT}." \
		  && continue
		local path=$(str2path "$id")
		[ -z "$path" ] && echo "ID $id not found." && continue
		local bn=$(basename "$path")
		local dir=$(dirname "$path")
		if [ -z "$ali" ]; then # remove alias
			if [[ "$bn" != *.alias=* ]]; then
				echo "$id already has no alias."
				continue
			fi
			bn=$(echo $bn | sed -e "s/\.alias=.*\./\./")
		elif [[ "$bn" == *.alias=* ]]; then # change alias
			debug "change bn=$bn"
			bn=$(echo $bn | sed -e "s/\.alias=.*\./\.alias=$ali\./")
			debug "after bn=$bn"
		else # add alias
			bn=$(echo $bn | sed -e \
			  "s/\(\.id=[0-9]*\.\)/\1alias=$ali\./")
		fi
		echo "${path#$GTD_ROOT}->$bn"
		mv $path $dir/$bn
	done
}
#=== SHELL =====================================================================
usage_shell() {  #heredoc
	cat<<-EOF
Shell-like environment, where you can run gtd commands without typing 'gtd'.
	EOF
}

in_shell=false
process_command() {
	[ $# -eq 0 ] && usage && return 0  #No arg, show usage

	case "$1" in  #$1 is command
	init) [ $help_me == true ] && usage_init || gtd_init;;
	ps1) gtd_ps1;;
	config) [ $help_me == true ] && usage_config || vim "$GTD_ROOT/.gtdrc";;
	md|mkdir) shift; [ $help_me == true ] && usage_mkdir || gtd_mkdir "$@";;
	cd) shift; [ $help_me == true ] && usage_cd || gtd_cd "$@";;
	a|add) shift; [ $help_me == true ] && usage_add || gtd_add "$@";;
	m|mv|move) shift; [ $help_me == true ] && usage_move || gtd_move "$@";;
	l|ls|list) shift; [ $help_me == true ] && usage_list || gtd_list "$@";;
	e|ed|edit) shift; [ $help_me == true ] && usage_edit || gtd_edit "$@";;
	alias) shift; [ $help_me == true ] && usage_alias || gtd_alias "$@";;
	shell) [ $in_shell == false ] && gtd_shell "$@"\
	  || echo "We are already in gtd shell.";;
  	exit) [ $in_shell == true ] && in_shell=false \
	  || echo "exit is a gtd shell command.";;
  	help) usage;;
	version) echo "0.02 2017-08-24 paulo.dx@gmail.com";;
	*) echo "Incorrect command: $1"; usage;;
	esac
	return 0
}

gtd_shell() {
	[ $help_me == true ] && usage_shell && return

	in_shell=true
	while : ; do # infinite loop
		printf "gtd~ "
		read args
		eval set -- "$args"
		process_command "$@"
		[ $in_shell == false ] && break
	done
}
#=== MAIN ======================================================================
[ $# -eq 0 ] && usage && exit # bkm for no arg check

# process help & verbose & debug in 1 place
args=() # empty array
help_me=false; verbose=false; debug=false
for arg in "$@"; do
	case "$arg" in
	'-?'|-h|--help) help_me=true;; # ? is a wildcard if not br by ''
	-v|--verbose) verbose=true;;
	--debug) debug=true;;
	*) args+=("$arg");; # collect args other than help/verbose/debug
	esac
done

if [[ $help_me == false && "$1" != init && "$1" != cd ]]; then
  # help_me will always be processed (because showing help need nearly nothing)
  # init will always be processed
  # other commands need at least a working dir, and should run in child shell
	if [[ "$0" == *"bash" ]]; then # source mode: `. gtd` or `source gtd`
		echo "gtd command should not run in source mode."
		return # exit in source mode will exit the shell
	fi # common (non-source) mode below
	if [ -z "$GTD_ROOT" ]; then
		echo "No working directory specified."
		echo "Please run '. $0 init' first."
		usage_init
		exit 0
	fi
fi

[ -z $(command -v getopt) ] && echo "No getopt command." && exit 1
#TODO: give the user some hint to find the package containing the getopt cmd
process_command "${args[@]}"
#=== Template ==================================================================
usage_template() {
	cat<<-EOF
Usage: gtd template [OPTION]...
   or: gtd template [OPTION]...
Description

Options:
  -o, --option=VALUE  Meaning
	EOF
}

gtd_template() {
	PARAMS=`getopt -o ab: --long apple,banana: \
	  -n 'gtd.template' -- "$@"`
	[ $? != 0 ] && echo "Failed parsing the arguments." && return
	eval set -- "$PARAMS"
	debug "gtd_template($@)"
	local apple=false; local banana=""
	while : ; do
		case "$1" in
		-a|--apple) apple=true; shift;;
		-b|--banana) banana="$2"; shift 2;;
		--) shift; break;;
		*) echo "Unknown option: $1"; return;;
		esac
	done
}
